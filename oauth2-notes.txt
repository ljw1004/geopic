import { FetchError } from "./utils";

const CLIENT_ID = 'e5461ba2-5cd4-4a14-ac80-9be4c017b685';

export async function onLoginClick() {
    // Code-flow authentication with PKCE (Proof Key for Code Exchange) is done by (1) we redirect
    // to Microsoft's login page but with a challenge that we invented here, (2) Microsoft redirects
    // back to us onBodyLoad with a "code" param, (3) we request that code be redeemed into access+refresh
    // tokens, and the verifier and redirect_uri we send in this final step proves to Microsoft that we're
    // the same party who requested the code in the first place. It uses base64url encoding, which
    // is like base64 encoding but with some url-dodgy characters replaced to avoid slip-ups.
    const base64url = (array: Uint8Array): string => btoa(String.fromCharCode.apply(null, Array.from<number>(array))).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    const code_verifier = base64url(crypto.getRandomValues(new Uint8Array(32)));
    const code_challenge = base64url(new Uint8Array((await crypto.subtle.digest('SHA-256', new TextEncoder().encode(code_verifier)))));
    sessionStorage.setItem('code_verifier', code_verifier);

    const params = new URLSearchParams({
        client_id: CLIENT_ID,
        response_type: 'code',
        redirect_uri: window.location.origin + window.location.pathname,
        scope: 'files.readwrite offline_access',
        code_challenge,
        code_challenge_method: 'S256'
    });
    location.href = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?${params}`;
}

async function exchangeCodeForToken(code: string): Promise<undefined | FetchError> {
    const code_verifier = sessionStorage.getItem('code_verifier')!;
    sessionStorage.removeItem('code_verifier');
    const params = new URLSearchParams({
        client_id: CLIENT_ID,
        code,
        code_verifier,
        redirect_uri: window.location.origin + window.location.pathname,
        grant_type: 'authorization_code'
    });
    const response = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: params.toString()
    });
    if (!response.ok) return new FetchError(response, await response.text());

    const tokenData = await response.json();
    localStorage.setItem('access_token', tokenData.access_token);
    localStorage.setItem('refresh_token', tokenData.refresh_token);
    window.history.replaceState(null, '', window.location.pathname);
    return undefined;
}

export async function onBodyLoad() {
    const url = new URL(location.href);
    const params = new URLSearchParams(url.search);
    const code = params.get('code');

    // If the user signed in, code-flow authentication will have redirected us back here with ?code=...
    if (code) await exchangeCodeForToken(code);
    console.log(`accessToken: ${localStorage.getItem('access_token')}`);
}

export function onLogoutClick() {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    location.href = `https://login.microsoftonline.com/common/oauth2/v2.0/logout?post_logout_redirect_uri=${location.href}`;
}

export async function testApiCall() {
    const response = await fetch('https://graph.microsoft.com/v1.0/me/drive/items/92917DCE344E62BC!342443', {
        headers: {
            Authorization: `Bearer ${localStorage.getItem('access_token')}`
        }
    });
    console.log(JSON.stringify(await response.json(), null, 2));
}

export async function onRefreshClick() {
    const params = new URLSearchParams({
        client_id: CLIENT_ID,
        refresh_token: localStorage.getItem('refresh_token')!,
        grant_type: 'refresh_token'
    });
    const response = await fetch('https://login.microsoftonline.com/common/oauth2/v2.0/token', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        body: params.toString()
    });
    if (!response.ok) return;

    const data = await response.json();
    localStorage.setItem('access_token', data.access_token);
    localStorage.setItem('refresh_token', data.refresh_token);
    console.log(`refreshed accessToken: ${data.access_token}`);
}
